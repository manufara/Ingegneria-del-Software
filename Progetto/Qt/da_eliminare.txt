# Classe per la finestra (ordinazione)--------
class Ordinazione(QMainWindow):
    def __init__(self, tavolo_selezionato):
        super(Ordinazione, self).__init__()
        # Carica la finestra ordinazione
        ui_file = os.path.join(os.path.dirname(__file__), "crea_ordinazione.ui")
        uic.loadUi(ui_file, self)

        # Imposta il QListWidget per non essere modificabile
        self.menu_list.setEditTriggers(QListWidget.NoEditTriggers)

        # Creazione del menu leggendo dal file di testo
        menu = leggi_menu_da_file('Progetto/Qt/testo_menu.txt')

        self.menu_dict = {}  # Dizionario per piatti e prezzi
        # Set per tracciare le categorie già visualizzate
        categorie_visualizzate = set()

        # Popola la lista con categorie e piatti
        for piatto in menu.piatti:
            # Se la categoria del piatto non è stata ancora visualizzata, aggiungila
            if piatto.categoria not in categorie_visualizzate:
                # Aggiungi una riga vuota tra le categorie, tranne per la prima
                if categorie_visualizzate:
                    self.menu_list.addItem('')  # Riga vuota per separare le categorie
                
                # Aggiungi la categoria
                self.menu_list.addItem(piatto.categoria)
                categorie_visualizzate.add(piatto.categoria)  # Segna la categoria come visualizzata

            # Aggiungi il piatto sotto la categoria corretta
            self.menu_list.addItem(piatto.mostraPiatto())

            # Aggiorna il dizionario con il piatto e il prezzo
            self.menu_dict[piatto.nome] = float(piatto.prezzo)

        # Collega il pulsante 'aggiungi''
        self.findChild(QPushButton, 'but_aggiungi').clicked.connect(self.aggiungi_piatto)
        # Collega il pulsante 'conferma'
        self.findChild(QPushButton, 'but_conferma').clicked.connect(self.conferma_ordine)
        # Collega il pulsante per tornare indietro
        self.findChild(QPushButton, 'indietro').clicked.connect(self.open_indietro)

        # Collega il pulsante da eliminare
        self.findChild(QPushButton, 'da_eliminare').clicked.connect(self.open_visualizza)

        self.ordinazione = Ordinazione(tavolo_selezionato)
        self.comanda = Comanda()

        self.show()

    def open_indietro(self):
        self.cliente_window = RicercaTavolo()
        self.cliente_window.show()
        self.close()

    def open_visualizza(self):
        self.ordinazione.mostra_ordinazione()

    def aggiungi_piatto(self):
        item_selezionato = self.menu_list.currentItem()  # Ottieni l'elemento selezionato nel listWidget
        if item_selezionato:
            piatto_selezionato = item_selezionato.text()  # Ottieni il nome del piatto
            if piatto_selezionato in self.menu_dict:
                prezzo = self.menu_dict[piatto_selezionato]  # Trova il prezzo del piatto
                quantita = self.quantita_spin.value()  # Ottieni la quantità dal spinBox
                
                # Aggiungi il piatto alla comanda
                self.comanda.genera_comanda(piatto_selezionato, prezzo, quantita)
                
                # Mostra un messaggio di conferma (opzionale)
                print(f"Aggiunto {quantita}x {piatto_selezionato} a €{prezzo} ciascuno.")
            else:
                print("Seleziona un piatto valido.")

    def conferma_ordine(self):
        if self.comanda.piatti:
            self.ordinazione.aggiorna_ordinazione(self.comanda)
            # Reset della comanda per iniziare una nuova
            self.comanda = Comanda()
            print("Comanda confermata.")
        else:
            print("Nessuna comanda da confermare.")
